当涉及“维护”时，为了“复用”目的而使用继承，结局并不完美。例如：在超类中加上fly（）就会导致所有的子类都具备fly（），连那些不该具备fly（）的子类也无法免除。
第一个设计原则：找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起。相同的表述：把会变化的部分取出并封装起来，以便以后可以轻易地改动或扩充此部分，而不影响不需要变化的其他部分。

第二个设计原则：针对接口编程，而不是针对实现编程。