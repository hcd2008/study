Composer是PHP的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。

使用composer，需要composer.json文件。该文件包含了项目的依赖和其他的一些元数据。
在composer.json文件中指定require key的值。
{
	"require":{
		"monolog/monolog":"1.0.*"
	}
}
包名称：供应商名称+项目名称
包版本：1.0.* 表示从1.0开始的开发分支。
重要的运算符~
~1.2相当于>=1.2,<2.0
~1.2.3 相当于>=1.2.3,<1.3
这对于遵循语义化版本号的项目最有用。

安装依赖包
获取定义的依赖到本地项目，只需要调用composer.phar运行install命令。
php composer.phar install
下载到vendor目录。
install命令将创建一个composer.lock文件到你项目的根目录中。
安装依赖后，composer将安装时确切的版本号列表写入composer.lock文件。
install命令会检查composer.lock文件是否存在，如果存在，它将下载lock中指定的版本。否则将读取composer.json并创建锁文件。
这意味着，更新composer.json后必须重新生成锁文件才有效。命令：
php composer.phar update
如果进行了全局安装，并且没有phar文件在当前目录，执行命令：composer install

自动加载
require "vendor/autoload.php";

启用中国镜像服务：
系统全局配置：config.json 执行 composer config -g repo.packagist composer https://packagist.phpcomposer.com
单个项目配置：将配置信息添加到项目的composer.json中。进入项目的根目录，执行命令：composer config repo.packagist composer https://packagist.phpcomposer.com

国内镜像原理：一般情况下，安装包的数据一般是从github.com上下载，安装包的元数据从packagist.org上下载。
但是国外网站连接速度很慢，可能被“墙”
解决办法：缓存所有安装包和元数据到国内的机房并通过国内的CDN进行加速。

局部安装：将composer.phar文件复制到任意目录，然后通过php composer.phar指令就可以使用composer
全局安装：将composer安装到系统环境变量path所包含的路径下面，就可以直接使用composer命令。linux：sudo mv composer.phar /usr/local/bin/composer
windows:

    找到并进入 PHP 的安装目录（和你在命令行中执行的 php 指令应该是同一套 PHP）。
    将 composer.phar 复制到 PHP 的安装目录下面，也就是和 php.exe 在同一级目录。
    在 PHP 安装目录下新建一个 composer.bat 文件，并将下列代码保存到此文件中。

@php "%~dp0composer.phar" %*

windows下运行composer.exe就会做这些工作。并且 可以用 composer代替 php composer.phar了！

5个有用的composer技巧
1，仅更新单个库 composer update foo/bar
只更新lock不更新库 composer update nothing
2,不编辑composer.json的情况下安装库 composer require 'foo/bar:1.0.0'
3,派生很容易 composer create-project doctrine/orm path 2.2.0
4,dist包优先 composer install --profile 强制使用压缩包，而不是克隆源代码。
5,若要修改，源代码优先 --prefer-source 强制选择克隆源代码。
